// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for
// license information.
// 
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.microsoft.azure.cognitiveservices.vision.computervision;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.exception.HttpResponseException;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpPipelineBuilder;
import com.azure.core.http.policy.CookiePolicy;
import com.azure.core.http.policy.RetryPolicy;
import com.azure.core.http.policy.UserAgentPolicy;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.http.rest.StreamResponse;
import com.azure.core.util.serializer.CollectionFormat;
import com.azure.core.util.serializer.JacksonAdapter;
import com.azure.management.AzureServiceClient;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.AreaOfInterestResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.BatchReadFileInStreamResponse;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.BatchReadFileResponse;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.ComputerVisionErrorException;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.DescriptionExclude;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.Details;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.DetectResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.DomainModelResults;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.Enum0;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageAnalysis;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageDescription;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.ImageUrl;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.ListModelsResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrLanguages;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.OcrResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.ReadOperationResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizeTextInStreamResponse;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.RecognizeTextResponse;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.TagResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.TextOperationResult;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.TextRecognitionMode;
import com.microsoft.azure.cognitiveservices.vision.computervision.models.VisualFeatureTypes;
import java.nio.ByteBuffer;
import java.util.List;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the ComputerVisionClient type.
 */
public final class ComputerVisionClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ComputerVisionClientService service;

    /**
     * Supported Cognitive Services endpoints.
     */
    private String endpoint;

    /**
     * Gets Supported Cognitive Services endpoints.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Sets Supported Cognitive Services endpoints.
     * 
     * @param endpoint the endpoint value.
     * @return the service client itself.
     */
    public ComputerVisionClient setEndpoint(String endpoint) {
        this.endpoint = endpoint;
        return this;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * Initializes an instance of ComputerVisionClient client.
     */
    public ComputerVisionClient() {
        this(new HttpPipelineBuilder().policies(new UserAgentPolicy(), new RetryPolicy(), new CookiePolicy()).build());
    }

    /**
     * Initializes an instance of ComputerVisionClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     */
    public ComputerVisionClient(HttpPipeline httpPipeline) {
        this.httpPipeline = httpPipeline;
        this.service = RestProxy.create(ComputerVisionClientService.class, this.httpPipeline);
    }

    /**
     * The interface defining all the services for ComputerVisionClient to be
     * used by the proxy service to perform REST calls.
     */
    @Host("{Endpoint}/vision/v2.1")
    @ServiceInterface(name = "ComputerVisionClient")
    private interface ComputerVisionClientService {
        @Post("/analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ImageAnalysis>> analyzeImage(@HostParam("Endpoint") String endpoint, @QueryParam("visualFeatures") String visualFeatures, @QueryParam("details") String details, @QueryParam("language") Enum0 language, @QueryParam("descriptionExclude") String descriptionExclude, @BodyParam("application/json") ImageUrl imageUrl);

        @Post("/describe")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ImageDescription>> describeImage(@HostParam("Endpoint") String endpoint, @QueryParam("maxCandidates") Integer maxCandidates, @QueryParam("language") Enum0 language, @QueryParam("descriptionExclude") String descriptionExclude, @BodyParam("application/json") ImageUrl imageUrl);

        @Post("/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<DetectResult>> detectObjects(@HostParam("Endpoint") String endpoint, @BodyParam("application/json") ImageUrl imageUrl);

        @Get("/models")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ListModelsResult>> listModels(@HostParam("Endpoint") String endpoint);

        @Post("/models/{model}/analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<DomainModelResults>> analyzeImageByDomain(@HostParam("Endpoint") String endpoint, @PathParam("model") String model, @QueryParam("language") Enum0 language, @BodyParam("application/json") ImageUrl imageUrl);

        @Post("/ocr")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<OcrResult>> recognizePrintedText(@HostParam("Endpoint") String endpoint, @QueryParam("detectOrientation") boolean detectOrientation, @QueryParam("language") OcrLanguages language, @BodyParam("application/json") ImageUrl imageUrl);

        @Post("/tag")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<TagResult>> tagImage(@HostParam("Endpoint") String endpoint, @QueryParam("language") Enum0 language, @BodyParam("application/json") ImageUrl imageUrl);

        @Post("/generateThumbnail")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<StreamResponse> generateThumbnail(@HostParam("Endpoint") String endpoint, @QueryParam("width") int width, @QueryParam("height") int height, @QueryParam("smartCropping") Boolean smartCropping, @BodyParam("application/json") ImageUrl imageUrl);

        @Post("/areaOfInterest")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<AreaOfInterestResult>> getAreaOfInterest(@HostParam("Endpoint") String endpoint, @BodyParam("application/json") ImageUrl imageUrl);

        @Post("/analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ImageAnalysis>> analyzeImageInStream(@HostParam("Endpoint") String endpoint, @QueryParam("visualFeatures") String visualFeatures, @QueryParam("details") String details, @QueryParam("language") Enum0 language, @QueryParam("descriptionExclude") String descriptionExclude, @BodyParam("application/octet-stream") Flux<ByteBuffer> image, @HeaderParam("Content-Length") long contentLength);

        @Post("/areaOfInterest")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<AreaOfInterestResult>> getAreaOfInterestInStream(@HostParam("Endpoint") String endpoint, @BodyParam("application/octet-stream") Flux<ByteBuffer> image, @HeaderParam("Content-Length") long contentLength);

        @Post("/describe")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ImageDescription>> describeImageInStream(@HostParam("Endpoint") String endpoint, @QueryParam("maxCandidates") Integer maxCandidates, @QueryParam("language") Enum0 language, @QueryParam("descriptionExclude") String descriptionExclude, @BodyParam("application/octet-stream") Flux<ByteBuffer> image, @HeaderParam("Content-Length") long contentLength);

        @Post("/detect")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<DetectResult>> detectObjectsInStream(@HostParam("Endpoint") String endpoint, @BodyParam("application/octet-stream") Flux<ByteBuffer> image, @HeaderParam("Content-Length") long contentLength);

        @Post("/generateThumbnail")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(HttpResponseException.class)
        Mono<StreamResponse> generateThumbnailInStream(@HostParam("Endpoint") String endpoint, @QueryParam("width") int width, @QueryParam("height") int height, @QueryParam("smartCropping") Boolean smartCropping, @BodyParam("application/octet-stream") Flux<ByteBuffer> image, @HeaderParam("Content-Length") long contentLength);

        @Post("/models/{model}/analyze")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<DomainModelResults>> analyzeImageByDomainInStream(@HostParam("Endpoint") String endpoint, @PathParam("model") String model, @QueryParam("language") Enum0 language, @BodyParam("application/octet-stream") Flux<ByteBuffer> image, @HeaderParam("Content-Length") long contentLength);

        @Post("/ocr")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<OcrResult>> recognizePrintedTextInStream(@HostParam("Endpoint") String endpoint, @QueryParam("detectOrientation") boolean detectOrientation, @QueryParam("language") OcrLanguages language, @BodyParam("application/octet-stream") Flux<ByteBuffer> image, @HeaderParam("Content-Length") long contentLength);

        @Post("/tag")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<TagResult>> tagImageInStream(@HostParam("Endpoint") String endpoint, @QueryParam("language") Enum0 language, @BodyParam("application/octet-stream") Flux<ByteBuffer> image, @HeaderParam("Content-Length") long contentLength);

        @Post("/recognizeText")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<RecognizeTextResponse> recognizeText(@HostParam("Endpoint") String endpoint, @QueryParam("mode") TextRecognitionMode mode, @BodyParam("application/json") ImageUrl imageUrl);

        @Get("/textOperations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<TextOperationResult>> getTextOperationResult(@HostParam("Endpoint") String endpoint, @PathParam("operationId") String operationId);

        @Post("/read/core/asyncBatchAnalyze")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<BatchReadFileResponse> batchReadFile(@HostParam("Endpoint") String endpoint, @BodyParam("application/json") ImageUrl imageUrl);

        @Get("/read/operations/{operationId}")
        @ExpectedResponses({200})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<SimpleResponse<ReadOperationResult>> getReadOperationResult(@HostParam("Endpoint") String endpoint, @PathParam("operationId") String operationId);

        @Post("/recognizeText")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<RecognizeTextInStreamResponse> recognizeTextInStream(@HostParam("Endpoint") String endpoint, @QueryParam("mode") TextRecognitionMode mode, @BodyParam("application/octet-stream") Flux<ByteBuffer> image, @HeaderParam("Content-Length") long contentLength);

        @Post("/read/core/asyncBatchAnalyze")
        @ExpectedResponses({202})
        @UnexpectedResponseExceptionType(ComputerVisionErrorException.class)
        Mono<BatchReadFileInStreamResponse> batchReadFileInStream(@HostParam("Endpoint") String endpoint, @BodyParam("application/octet-stream") Flux<ByteBuffer> image, @HeaderParam("Content-Length") long contentLength);
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param url Publicly reachable URL of an image.
     * @param visualFeatures Array of VisualFeatureTypes.
     * @param details Array of Details.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param descriptionExclude Array of DescriptionExclude.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of AnalyzeImage operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageAnalysis>> analyzeImageWithResponseAsync(String url, List<VisualFeatureTypes> visualFeatures, List<Details> details, Enum0 language, List<DescriptionExclude> descriptionExclude) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        String visualFeaturesConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(visualFeatures, CollectionFormat.CSV);
        String detailsConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(details, CollectionFormat.CSV);
        String descriptionExcludeConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(descriptionExclude, CollectionFormat.CSV);
        return service.analyzeImage(this.getEndpoint(), visualFeaturesConverted, detailsConverted, language, descriptionExcludeConverted, imageUrl);
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param url Publicly reachable URL of an image.
     * @param visualFeatures Array of VisualFeatureTypes.
     * @param details Array of Details.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param descriptionExclude Array of DescriptionExclude.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of AnalyzeImage operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageAnalysis> analyzeImageAsync(String url, List<VisualFeatureTypes> visualFeatures, List<Details> details, Enum0 language, List<DescriptionExclude> descriptionExclude) {
        return analyzeImageWithResponseAsync(url, visualFeatures, details, language, descriptionExclude)
            .flatMap((SimpleResponse<ImageAnalysis> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param url Publicly reachable URL of an image.
     * @param maxCandidates Maximum number of candidate descriptions to be returned.  The default is 1.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param descriptionExclude Array of DescriptionExclude.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of content tags, along with a list of captions sorted by confidence level, and image metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageDescription>> describeImageWithResponseAsync(String url, Integer maxCandidates, Enum0 language, List<DescriptionExclude> descriptionExclude) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        String descriptionExcludeConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(descriptionExclude, CollectionFormat.CSV);
        return service.describeImage(this.getEndpoint(), maxCandidates, language, descriptionExcludeConverted, imageUrl);
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param url Publicly reachable URL of an image.
     * @param maxCandidates Maximum number of candidate descriptions to be returned.  The default is 1.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param descriptionExclude Array of DescriptionExclude.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of content tags, along with a list of captions sorted by confidence level, and image metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageDescription> describeImageAsync(String url, Integer maxCandidates, Enum0 language, List<DescriptionExclude> descriptionExclude) {
        return describeImageWithResponseAsync(url, maxCandidates, language, descriptionExclude)
            .flatMap((SimpleResponse<ImageDescription> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Performs object detection on the specified image.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a DetectImage call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DetectResult>> detectObjectsWithResponseAsync(String url) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.detectObjects(this.getEndpoint(), imageUrl);
    }

    /**
     * Performs object detection on the specified image.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a DetectImage call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectResult> detectObjectsAsync(String url) {
        return detectObjectsWithResponseAsync(url)
            .flatMap((SimpleResponse<DetectResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the List Domain Models operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ListModelsResult>> listModelsWithResponseAsync() {
        return service.listModels(this.getEndpoint());
    }

    /**
     * This operation returns the list of domain-specific models that are supported by the Computer Vision API. Currently, the API supports following domain-specific models: celebrity recognizer, landmark recognizer.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of the List Domain Models operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ListModelsResult> listModelsAsync() {
        return listModelsWithResponseAsync()
            .flatMap((SimpleResponse<ListModelsResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param model The domain-specific content to recognize.
     * @param url Publicly reachable URL of an image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of image analysis using a specific domain model including additional metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DomainModelResults>> analyzeImageByDomainWithResponseAsync(String model, String url, Enum0 language) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.analyzeImageByDomain(this.getEndpoint(), model, language, imageUrl);
    }

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param model The domain-specific content to recognize.
     * @param url Publicly reachable URL of an image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of image analysis using a specific domain model including additional metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DomainModelResults> analyzeImageByDomainAsync(String model, String url, Enum0 language) {
        return analyzeImageByDomainWithResponseAsync(model, url, language)
            .flatMap((SimpleResponse<DomainModelResults> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     * 
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param url Publicly reachable URL of an image.
     * @param language The BCP-47 language code of the text to be detected in the image. The default value is 'unk'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<OcrResult>> recognizePrintedTextWithResponseAsync(boolean detectOrientation, String url, OcrLanguages language) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.recognizePrintedText(this.getEndpoint(), detectOrientation, language, imageUrl);
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     * 
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param url Publicly reachable URL of an image.
     * @param language The BCP-47 language code of the text to be detected in the image. The default value is 'unk'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OcrResult> recognizePrintedTextAsync(boolean detectOrientation, String url, OcrLanguages language) {
        return recognizePrintedTextWithResponseAsync(detectOrientation, url, language)
            .flatMap((SimpleResponse<OcrResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param url Publicly reachable URL of an image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results of a image tag operation, including any tags and image metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TagResult>> tagImageWithResponseAsync(String url, Enum0 language) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.tagImage(this.getEndpoint(), language, imageUrl);
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param url Publicly reachable URL of an image.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results of a image tag operation, including any tags and image metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagResult> tagImageAsync(String url, Enum0 language) {
        return tagImageWithResponseAsync(url, language)
            .flatMap((SimpleResponse<TagResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     * 
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param url Publicly reachable URL of an image.
     * @param smartCropping Boolean flag for enabling smart cropping.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> generateThumbnailWithResponseAsync(int width, int height, String url, Boolean smartCropping) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.generateThumbnail(this.getEndpoint(), width, height, smartCropping, imageUrl);
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     * 
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param url Publicly reachable URL of an image.
     * @param smartCropping Boolean flag for enabling smart cropping.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> generateThumbnailAsync(int width, int height, String url, Boolean smartCropping) {
        return generateThumbnailWithResponseAsync(width, height, url, smartCropping)
            .flatMapMany(StreamResponse::getValue);}

    /**
     * This operation returns a bounding box around the most important area of the image.
     * A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     * 
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of AreaOfInterest operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AreaOfInterestResult>> getAreaOfInterestWithResponseAsync(String url) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.getAreaOfInterest(this.getEndpoint(), imageUrl);
    }

    /**
     * This operation returns a bounding box around the most important area of the image.
     * A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     * 
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of AreaOfInterest operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AreaOfInterestResult> getAreaOfInterestAsync(String url) {
        return getAreaOfInterestWithResponseAsync(url)
            .flatMap((SimpleResponse<AreaOfInterestResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param visualFeatures Array of VisualFeatureTypes.
     * @param details Array of Details.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param descriptionExclude Array of DescriptionExclude.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of AnalyzeImage operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageAnalysis>> analyzeImageInStreamWithResponseAsync(Flux<ByteBuffer> image, long contentLength, List<VisualFeatureTypes> visualFeatures, List<Details> details, Enum0 language, List<DescriptionExclude> descriptionExclude) {
        String visualFeaturesConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(visualFeatures, CollectionFormat.CSV);
        String detailsConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(details, CollectionFormat.CSV);
        String descriptionExcludeConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(descriptionExclude, CollectionFormat.CSV);
        return service.analyzeImageInStream(this.getEndpoint(), visualFeaturesConverted, detailsConverted, language, descriptionExcludeConverted, image, contentLength);
    }

    /**
     * This operation extracts a rich set of visual features based on the image content.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL. Within your request, there is an optional parameter to allow you to choose which features to return. By default, image categories are returned in the response.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param visualFeatures Array of VisualFeatureTypes.
     * @param details Array of Details.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param descriptionExclude Array of DescriptionExclude.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of AnalyzeImage operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageAnalysis> analyzeImageInStreamAsync(Flux<ByteBuffer> image, long contentLength, List<VisualFeatureTypes> visualFeatures, List<Details> details, Enum0 language, List<DescriptionExclude> descriptionExclude) {
        return analyzeImageInStreamWithResponseAsync(image, contentLength, visualFeatures, details, language, descriptionExclude)
            .flatMap((SimpleResponse<ImageAnalysis> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation returns a bounding box around the most important area of the image.
     * A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of AreaOfInterest operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<AreaOfInterestResult>> getAreaOfInterestInStreamWithResponseAsync(Flux<ByteBuffer> image, long contentLength) {
        return service.getAreaOfInterestInStream(this.getEndpoint(), image, contentLength);
    }

    /**
     * This operation returns a bounding box around the most important area of the image.
     * A successful response will be returned in JSON. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of AreaOfInterest operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<AreaOfInterestResult> getAreaOfInterestInStreamAsync(Flux<ByteBuffer> image, long contentLength) {
        return getAreaOfInterestInStreamWithResponseAsync(image, contentLength)
            .flatMap((SimpleResponse<AreaOfInterestResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param maxCandidates Maximum number of candidate descriptions to be returned.  The default is 1.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param descriptionExclude Array of DescriptionExclude.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of content tags, along with a list of captions sorted by confidence level, and image metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ImageDescription>> describeImageInStreamWithResponseAsync(Flux<ByteBuffer> image, long contentLength, Integer maxCandidates, Enum0 language, List<DescriptionExclude> descriptionExclude) {
        String descriptionExcludeConverted = JacksonAdapter.createDefaultSerializerAdapter().serializeList(descriptionExclude, CollectionFormat.CSV);
        return service.describeImageInStream(this.getEndpoint(), maxCandidates, language, descriptionExcludeConverted, image, contentLength);
    }

    /**
     * This operation generates a description of an image in human readable language with complete sentences. The description is based on a collection of content tags, which are also returned by the operation. More than one description can be generated for each image. Descriptions are ordered by their confidence score. Descriptions may include results from celebrity and landmark domain models, if applicable.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param maxCandidates Maximum number of candidate descriptions to be returned.  The default is 1.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @param descriptionExclude Array of DescriptionExclude.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a collection of content tags, along with a list of captions sorted by confidence level, and image metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ImageDescription> describeImageInStreamAsync(Flux<ByteBuffer> image, long contentLength, Integer maxCandidates, Enum0 language, List<DescriptionExclude> descriptionExclude) {
        return describeImageInStreamWithResponseAsync(image, contentLength, maxCandidates, language, descriptionExclude)
            .flatMap((SimpleResponse<ImageDescription> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Performs object detection on the specified image.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a DetectImage call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DetectResult>> detectObjectsInStreamWithResponseAsync(Flux<ByteBuffer> image, long contentLength) {
        return service.detectObjectsInStream(this.getEndpoint(), image, contentLength);
    }

    /**
     * Performs object detection on the specified image.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of a DetectImage call.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DetectResult> detectObjectsInStreamAsync(Flux<ByteBuffer> image, long contentLength) {
        return detectObjectsInStreamWithResponseAsync(image, contentLength)
            .flatMap((SimpleResponse<DetectResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     * 
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param smartCropping Boolean flag for enabling smart cropping.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<StreamResponse> generateThumbnailInStreamWithResponseAsync(int width, int height, Flux<ByteBuffer> image, long contentLength, Boolean smartCropping) {
        return service.generateThumbnailInStream(this.getEndpoint(), width, height, smartCropping, image, contentLength);
    }

    /**
     * This operation generates a thumbnail image with the user-specified width and height. By default, the service analyzes the image, identifies the region of interest (ROI), and generates smart cropping coordinates based on the ROI. Smart cropping helps when you specify an aspect ratio that differs from that of the input image.
     * A successful response contains the thumbnail image binary. If the request failed, the response contains an error code and a message to help determine what went wrong.
     * Upon failure, the error code and an error message are returned. The error code could be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, InvalidThumbnailSize, NotSupportedImage, FailedToProcess, Timeout, or InternalServerError.
     * 
     * @param width Width of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param height Height of the thumbnail, in pixels. It must be between 1 and 1024. Recommended minimum of 50.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param smartCropping Boolean flag for enabling smart cropping.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws HttpResponseException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Flux<ByteBuffer> generateThumbnailInStreamAsync(int width, int height, Flux<ByteBuffer> image, long contentLength, Boolean smartCropping) {
        return generateThumbnailInStreamWithResponseAsync(width, height, image, contentLength, smartCropping)
            .flatMapMany(StreamResponse::getValue);}

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param model The domain-specific content to recognize.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of image analysis using a specific domain model including additional metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<DomainModelResults>> analyzeImageByDomainInStreamWithResponseAsync(String model, Flux<ByteBuffer> image, long contentLength, Enum0 language) {
        return service.analyzeImageByDomainInStream(this.getEndpoint(), model, language, image, contentLength);
    }

    /**
     * This operation recognizes content within an image by applying a domain-specific model. The list of domain-specific models that are supported by the Computer Vision API can be retrieved using the /models GET request. Currently, the API provides following domain-specific models: celebrities, landmarks.
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON.
     * If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param model The domain-specific content to recognize.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of image analysis using a specific domain model including additional metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<DomainModelResults> analyzeImageByDomainInStreamAsync(String model, Flux<ByteBuffer> image, long contentLength, Enum0 language) {
        return analyzeImageByDomainInStreamWithResponseAsync(model, image, contentLength, language)
            .flatMap((SimpleResponse<DomainModelResults> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     * 
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param language The BCP-47 language code of the text to be detected in the image. The default value is 'unk'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<OcrResult>> recognizePrintedTextInStreamWithResponseAsync(boolean detectOrientation, Flux<ByteBuffer> image, long contentLength, OcrLanguages language) {
        return service.recognizePrintedTextInStream(this.getEndpoint(), detectOrientation, language, image, contentLength);
    }

    /**
     * Optical Character Recognition (OCR) detects text in an image and extracts the recognized characters into a machine-usable character stream.
     * Upon success, the OCR results will be returned.
     * Upon failure, the error code together with an error message will be returned. The error code can be one of InvalidImageUrl, InvalidImageFormat, InvalidImageSize, NotSupportedImage, NotSupportedLanguage, or InternalServerError.
     * 
     * @param detectOrientation Whether detect the text orientation in the image. With detectOrientation=true the OCR service tries to detect the image orientation and correct it before further processing (e.g. if it's upside-down).
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param language The BCP-47 language code of the text to be detected in the image. The default value is 'unk'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the response.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<OcrResult> recognizePrintedTextInStreamAsync(boolean detectOrientation, Flux<ByteBuffer> image, long contentLength, OcrLanguages language) {
        return recognizePrintedTextInStreamWithResponseAsync(detectOrientation, image, contentLength, language)
            .flatMap((SimpleResponse<OcrResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results of a image tag operation, including any tags and image metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TagResult>> tagImageInStreamWithResponseAsync(Flux<ByteBuffer> image, long contentLength, Enum0 language) {
        return service.tagImageInStream(this.getEndpoint(), language, image, contentLength);
    }

    /**
     * This operation generates a list of words, or tags, that are relevant to the content of the supplied image. The Computer Vision API can return tags based on objects, living beings, scenery or actions found in images. Unlike categories, tags are not organized according to a hierarchical classification system, but correspond to image content. Tags may contain hints to avoid ambiguity or provide context, for example the tag "ascomycete" may be accompanied by the hint "fungus".
     * Two input methods are supported -- (1) Uploading an image or (2) specifying an image URL.
     * A successful response will be returned in JSON. If the request failed, the response will contain an error code and a message to help understand what went wrong.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @param language The desired language for output generation. If this parameter is not specified, the default value is &amp;quot;en&amp;quot;.Supported languages:en - English, Default. es - Spanish, ja - Japanese, pt - Portuguese, zh - Simplified Chinese.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the results of a image tag operation, including any tags and image metadata.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TagResult> tagImageInStreamAsync(Flux<ByteBuffer> image, long contentLength, Enum0 language) {
        return tagImageInStreamWithResponseAsync(image, contentLength, language)
            .flatMap((SimpleResponse<TagResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your Get Recognize Text Operation Result operation.
     * 
     * @param mode Type of text to recognize.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecognizeTextResponse> recognizeTextWithResponseAsync(TextRecognitionMode mode, String url) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.recognizeText(this.getEndpoint(), mode, imageUrl);
    }

    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your Get Recognize Text Operation Result operation.
     * 
     * @param mode Type of text to recognize.
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> recognizeTextAsync(TextRecognitionMode mode, String url) {
        return recognizeTextWithResponseAsync(mode, url)
            .flatMap((RecognizeTextResponse res) -> Mono.empty());
    }

    /**
     * This interface is used for getting text operation result. The URL to this interface should be retrieved from 'Operation-Location' field returned from Recognize Text interface.
     * 
     * @param operationId Id of the text operation returned in the response of the 'Recognize Text'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of recognition text operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<TextOperationResult>> getTextOperationResultWithResponseAsync(String operationId) {
        return service.getTextOperationResult(this.getEndpoint(), operationId);
    }

    /**
     * This interface is used for getting text operation result. The URL to this interface should be retrieved from 'Operation-Location' field returned from Recognize Text interface.
     * 
     * @param operationId Id of the text operation returned in the response of the 'Recognize Text'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return result of recognition text operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<TextOperationResult> getTextOperationResultAsync(String operationId) {
        return getTextOperationResultWithResponseAsync(operationId)
            .flatMap((SimpleResponse<TextOperationResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read File interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadOperationResult' operation to access OCR results.​.
     * 
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BatchReadFileResponse> batchReadFileWithResponseAsync(String url) {
        ImageUrl imageUrl = new ImageUrl();
        imageUrl.setUrl(url);
        return service.batchReadFile(this.getEndpoint(), imageUrl);
    }

    /**
     * Use this interface to get the result of a Read operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read File interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'GetReadOperationResult' operation to access OCR results.​.
     * 
     * @param url Publicly reachable URL of an image.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> batchReadFileAsync(String url) {
        return batchReadFileWithResponseAsync(url)
            .flatMap((BatchReadFileResponse res) -> Mono.empty());
    }

    /**
     * This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Batch Read File interface.
     * 
     * @param operationId Id of read operation returned in the response of the 'Batch Read File' interface.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oCR result of the read operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<SimpleResponse<ReadOperationResult>> getReadOperationResultWithResponseAsync(String operationId) {
        return service.getReadOperationResult(this.getEndpoint(), operationId);
    }

    /**
     * This interface is used for getting OCR results of Read operation. The URL to this interface should be retrieved from 'Operation-Location' field returned from Batch Read File interface.
     * 
     * @param operationId Id of read operation returned in the response of the 'Batch Read File' interface.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return oCR result of the read operation.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<ReadOperationResult> getReadOperationResultAsync(String operationId) {
        return getReadOperationResultWithResponseAsync(operationId)
            .flatMap((SimpleResponse<ReadOperationResult> res) -> {
                if (res.getValue() != null) {
                    return Mono.just(res.getValue());
                } else {
                    return Mono.empty();
                }
            });
    }

    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your Get Recognize Text Operation Result operation.
     * 
     * @param mode Type of text to recognize.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<RecognizeTextInStreamResponse> recognizeTextInStreamWithResponseAsync(TextRecognitionMode mode, Flux<ByteBuffer> image, long contentLength) {
        return service.recognizeTextInStream(this.getEndpoint(), mode, image, contentLength);
    }

    /**
     * Recognize Text operation. When you use the Recognize Text interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your Get Recognize Text Operation Result operation.
     * 
     * @param mode Type of text to recognize.
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> recognizeTextInStreamAsync(TextRecognitionMode mode, Flux<ByteBuffer> image, long contentLength) {
        return recognizeTextInStreamWithResponseAsync(mode, image, contentLength)
            .flatMap((RecognizeTextInStreamResponse res) -> Mono.empty());
    }

    /**
     * Use this interface to get the result of a Read Document operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read Document interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'Get Read Result operation' to access OCR results.​.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<BatchReadFileInStreamResponse> batchReadFileInStreamWithResponseAsync(Flux<ByteBuffer> image, long contentLength) {
        return service.batchReadFileInStream(this.getEndpoint(), image, contentLength);
    }

    /**
     * Use this interface to get the result of a Read Document operation, employing the state-of-the-art Optical Character Recognition (OCR) algorithms optimized for text-heavy documents. When you use the Read Document interface, the response contains a field called 'Operation-Location'. The 'Operation-Location' field contains the URL that you must use for your 'Get Read Result operation' to access OCR results.​.
     * 
     * @param image An image stream.
     * @param contentLength The contentLength parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ComputerVisionErrorException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the completion.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Mono<Void> batchReadFileInStreamAsync(Flux<ByteBuffer> image, long contentLength) {
        return batchReadFileInStreamWithResponseAsync(image, contentLength)
            .flatMap((BatchReadFileInStreamResponse res) -> Mono.empty());
    }
}
